@model EventInfoAndPriceCheckViewModel

@{
    ViewData["Title"] = "PriceCheck";
}



<div class="row">
    <div class="col-md-6">
        <div class="w3-container w3-card-4 w3-round w3-light-grey input-card-panel">
            <h2>Event Information</h2>
            <form asp-action="Summary" id="submitForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input asp-for="Date" type="hidden" />
                <input asp-for="HallId" type="hidden" />
                <input asp-for="RentTime" type="hidden" />
                <input asp-for="SecurityGuardCostPerHour" type="hidden" />
                <input id="HallRentPriceInput" asp-for="HallRentalPrice" type="hidden" />
                <input id="TablesAndChairsPriceInput" asp-for="TablesAndChairsPrice" type="hidden" />
                <input id="SecurityPriceInput" asp-for="SecurityPrice" type="hidden" />
                <input id="PriceInput" asp-for="TotalPrice" type="hidden" />
                <div class="form-group">
                    <label asp-for="EventTitle" class="control-label"></label>
                    <input asp-for="EventTitle" class="form-control" />
                    <span asp-validation-for="EventTitle" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="EventStart" class="control-label"></label>
                    <input asp-for="EventStart" class="form-control" />
                    <span asp-validation-for="EventStart" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="EventEnd" class="control-label"></label>
                    <input asp-for="EventEnd" class="form-control" />
                    <span asp-validation-for="EventEnd" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="NumberOfPeople" class="control-label"></label>
                    <input id="NumberOfPeople" asp-for="NumberOfPeople" class="form-control" />
                    <span id="NumberOfPeople-error" class="price-check-error"></span>
                    <span asp-validation-for="NumberOfPeople" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input id="UseTablesAndChairs" class="w3-check" asp-for="UsingTablesAndChairs" />
                    <label>
                        @Html.DisplayNameFor(model => model.UsingTablesAndChairs)
                    </label>
                </div>
                <div class="form-group">
                    <input id="ParkingLotSecurity-checkbox" class="w3-check" type="checkbox" />
                    <label>
                        Parking Lot Security
                    </label>
                </div>
                <div id="SecurityLot-inputs" style="display:none">
                    <div class="form-group">
                        <label class="control-label" asp-for="ParkingLotSecStart"></label>
                        <input id="ParkLotSecStart" asp-for="ParkingLotSecStart" class="form-control secLot-input" />
                        <span id="ParkLotSecStart-error" class="price-check-error"></span>
                    </div>

                    <div class="form-group">
                        <label class="control-label" asp-for="ParkingLotSecEnd">Security End</label>
                        <input id="ParkLotSecEnd" asp-for="ParkingLotSecEnd" class="form-control secLot-input" />
                        <span id="ParkLotSecEnd-error" class="price-check-error"></span>
                    </div>
                </div>
                @*<div class="form-group">
                        <label asp-for="SecurityGuards" class="control-label"></label>
                        <input id="SecurityGuards" asp-for="SecurityGuards" class="form-control" />
                        <span asp-validation-for="SecurityGuards" class="text-danger"></span>
                        <span id="SecurityGuards-error" class="price-check-error"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="RequestedSecurityHoursPerGuard" class="control-label"></label>
                        <input id="SecServiceHoursPerGuard" asp-for="RequestedSecurityHoursPerGuard" class="form-control" />
                        <span asp-validation-for="RequestedSecurityHoursPerGuard" class="text-danger"></span>
                        <span id="SecServiceHours-error" class="price-check-error"></span>
                    </div>*@
                <div class="form-group">
                    <input type="submit" value="Continue" class="w3-button w3-border w3-border-grey w3-round" />
                </div>
            </form>
        </div>
    </div>

    <div class="col-md-6 event-side-info">
        <p>Hall: <b>@Model.HallName</b></p>
        <p>Date: <b>@Model.Date.ToShortDateString()</b></p>
        <p>Time: <b>@Model.RentTimeDisplay</b></p>
        <div id="refTable" class="price-side-info">
            @Html.Partial("_PartialPrice", Model.EventPriceModel)
        </div>
    </div>
</div>



@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}


    <script>


        $(document).ready(function () {
            console.log('ready')


            let tablesAndChairsPrice = 0;
            let securityPrice = 0;

            let startPrice = @Model.TotalPrice

            let totalPrice = @Model.TotalPrice;
            let chairCostPerPerson = @Model.ChairTableCostPerPerson;
            let hallCapacity = @Model.HallCapacity;

            let securityGuardCostPerHour = @Model.SecurityGuardCostPerHour;

            let correctDataTabAndCh = true;
            let correctDataSecurity = true;

            //Table and Chairs Price Calcualtion

            $('#UseTablesAndChairs').change(function () {
                let numberOfPeople = $('#NumberOfPeople').val()

                if (numberOfPeople > hallCapacity) {
                    $('#NumberOfPeople-error').text(`The Hall capacity is ${hallCapacity} people`)
                    correctDataTabAndCh = false;
                    return;
                } else {
                    $('#NumberOfPeople-error').text("")
                    correctDataTabAndCh = true;

                }

                if ($(this).prop('checked')) {


                    if (numberOfPeople < 1) {
                        $('#NumberOfPeople-error').text("Please e mark the number of people")
                    }
                    console.log('checkbox  - checked ')
                    tablesAndChairsPrice = numberOfPeople * chairCostPerPerson;

                        totalPrice = startPrice + tablesAndChairsPrice + securityPrice;

                    UpdatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice)


                }
                else {
                    console.log('UseTablesAndChairs checkbox  - not checked')
                    tablesAndChairsPrice = 0;

                    totalPrice = startPrice + tablesAndChairsPrice + securityPrice;

                    UpdatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice)

                }
            })

            $('#NumberOfPeople').change(function () {
                let numberOfPeople = $('#NumberOfPeople').val()

                if (numberOfPeople > hallCapacity) {
                    $('#NumberOfPeople-error').text(`The Hall capacity is ${hallCapacity} people`)
                    tablesAndChairsPrice = 0;
                    correctDataTabAndCh = false;
                    return;
                } else {
                    $('#NumberOfPeople-error').text("")
                    correctDataTabAndCh = true;
                }

                if ($('#UseTablesAndChairs').prop('checked')) {

                    if (numberOfPeople < 1) {
                        $('#NumberOfPeople-error').text("Please e mark the number of people")
                        return;
                    } else {
                        $('#NumberOfPeople-error').text("")

                    }

                    //console.log('UseTablesAndChairs checkbox  - checked')
                    tablesAndChairsPrice = numberOfPeople * chairCostPerPerson;

                    totalPrice = startPrice + tablesAndChairsPrice + securityPrice;
                    UpdatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice)


                }

            })



            //ParkingLotSecurity

                let utcSecondsStart = @Model.EventStartDateTimeInMs;
                let utcSecondsEnd = @Model.EventEndDateTimeInMs;

             
                //const eventStartDate = new Date(utcSecondsStart);
                //const eventEndDate = new Date(utcSecondsEnd);
                //console.log('Event Start Date - ' + eventStartDate);
                //console.log('Event End Date - ' + eventEndDate);

            $('#ParkingLotSecurity-checkbox').change(() => {

                if ($('#ParkingLotSecurity-checkbox').prop('checked')) {

                    $('#SecurityLot-inputs').show();
                    console.log('ParkingLotSecurity - checked')

                } else {
                    console.log('ParkingLotSecurity - NOT checked')
                    $('#SecurityLot-inputs').hide();
                    correctDataSecurity = true;
                    UpdateSecurityPrice(0)
                    return;
                }


                let isDateCorrect = CheckIfSecurityDataIsCorrect();

                console.log(isDateCorrect);

                if (isDateCorrect == false) {
                    correctDataSecurity = false;
                    return;
                }

                correctDataSecurity = true;
                let hoursDiff = checkDifference();


                UpdateSecurityPrice(hoursDiff);

            })


            $("#ParkLotSecStart").change(() => {


                let isDateCorrect = CheckIfSecurityDataIsCorrect();
                console.log(isDateCorrect);

                if (isDateCorrect == false) {
                    correctDataSecurity = false;
                    return;
                }

                correctDataSecurity = true;

                let hoursDiff = checkDifference();

                UpdateSecurityPrice(hoursDiff);

            });

            $("#ParkLotSecEnd").change(() => {


                let isDateCorrect = CheckIfSecurityDataIsCorrect();

                console.log(isDateCorrect);
                if (isDateCorrect == false) {
                    correctDataSecurity = false;
                    return;
                }

                correctDataSecurity = true;
                let hoursDiff = checkDifference();


                UpdateSecurityPrice(hoursDiff);
            });


            function CheckIfSecurityDataIsCorrect() {
                let parkLotSecStartTimeValue = $("#ParkLotSecStart").val();
                let parkLotSecEndTimeValue = $("#ParkLotSecEnd").val();

                let parkLotSecStartTime = new Date(parkLotSecStartTimeValue)
                let parkLotSecEndTime = new Date(parkLotSecEndTimeValue)

                //Models
                let utcSecondsStart = @Model.EventStartDateTimeInMs;
                let eventStartDate = new Date(utcSecondsStart);

                let utcSecondsEnd = @Model.EventEndDateTimeInMs;
                let eventEndDate = new Date(utcSecondsEnd)


                if (parkLotSecEndTime <= eventStartDate) {
                    $('#ParkLotSecEnd-error').text('Security End DateTime cannot be before Event Start DateTime');
                    return false;
                } else {
                    $('#ParkLotSecEnd-error').text('');
                }

                if (parkLotSecEndTime <= parkLotSecStartTime) {
                    if (parkLotSecStartTime > eventStartDate) {
                        $('#ParkLotSecStart-error').text('Security Start DateTime cannot be after Event Start DateTime');
                    } else {
                        $('#ParkLotSecStart-error').text('');
                    }
                    
                    $('#ParkLotSecEnd-error').text('Security End Time cannot be before Security Start Time');
                    return false;
                } else {
                    $('#ParkLotSecEnd-error').text('');
                }

                if (parkLotSecEndTime > eventEndDate) {
                    $('#ParkLotSecEnd-error').text('Security End Time cannot be after Event End Time');
                    return false;
                } else {
                    $('#ParkLotSecEnd-error').text('');
                }

                if (parkLotSecStartTime < eventStartDate) {
                    $('#ParkLotSecStart-error').text('Security Start DateTime cannot be before Event Start DateTime');
                    return false;
                } else {
                    $('#ParkLotSecStart-error').text('');
                }

                if (parkLotSecStartTime.setHours(0, 0, 0, 0) != eventStartDate.setHours(0, 0, 0, 0)) {
                    $('#ParkLotSecStart-error').text('Parking Lot Security Date cannot be different from Event Date');
                    return false;
                } else {
                    $('#ParkLotSecStart-error').text('');
                }

                return true;
            }


            function checkDifference() {
                let parkLotSecStartTimeValue = $("#ParkLotSecStart").val();
                let parkLotSecEndTimeValue = $("#ParkLotSecEnd").val();

                let parkLotSecStartTime = new Date(parkLotSecStartTimeValue)
                let parkLotSecEndTime = new Date(parkLotSecEndTimeValue)

                let hoursDiff = Math.abs(parkLotSecEndTime - parkLotSecStartTime) / 36e5;

                hoursDiff = Math.ceil(hoursDiff);

                console.log(`Sec start - ${parkLotSecStartTime}`);
                console.log(`Sec end - ${parkLotSecEndTime}`);
                console.log(`Sec diff - ${hoursDiff}`);

                return hoursDiff;
            }


            function UpdateSecurityPrice(hoursDiff) {

                if ($('#ParkingLotSecurity-checkbox').prop('checked')) {

                    securityPrice = hoursDiff * securityGuardCostPerHour;

                }else {
                    securityPrice = 0;
                    correctDataSecurity = true;
                }

                totalPrice = startPrice + tablesAndChairsPrice + securityPrice;
                UpdatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice)
            }









            /////////////////////////////////////////////////////Security Price Calcualtion

            $('#SecurityGuards').change(() => {
                let securityGuards = $('#SecurityGuards').val();
                let secHoursPerGuard = $('#SecServiceHoursPerGuard').val();

                if (securityGuards == 0 && secHoursPerGuard == 0) {
                    securityPrice = 0;
                    $('#SecurityGuards-error').text('');
                    $('#SecServiceHours-error').text('');
                    correctDataSecurity = true;
                }

                if (securityGuards > @GlobalConstants.MaxSecurityCuards ) {
                    securityPrice = 0;
                    return;
                }

                if (securityGuards == 0) {
                    securityPrice = 0;
                    if (secHoursPerGuard != 0) {
                        $('#SecurityGuards-error').text('Please e fill the security guards Input');
                        correctDataSecurity = false;
                        return;
                    }
                } else {
                    $('#SecurityGuards-error').text('');
                    if (secHoursPerGuard == 0) {
                        securityPrice = 0
                       // console.log('here')
                        $('#SecServiceHours-error').text('Please e fill the security hours per guard Input');
                        correctDataSecurity = false;
                        return;
                    }
                    correctDataSecurity = true;
                }

                securityPrice = securityGuards * secHoursPerGuard * securityGuardCostPerHour
                totalPrice = startPrice + tablesAndChairsPrice + securityPrice;
                UpdatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice)
            })

            $('#SecServiceHoursPerGuard').change(() => {
                let securityGuards = $('#SecurityGuards').val();
                let secHoursPerGuard = $('#SecServiceHoursPerGuard').val();

                if (securityGuards == 0 && secHoursPerGuard == 0) {
                    securityPrice = 0;
                    $('#SecurityGuards-error').text('');
                    $('#SecServiceHours-error').text('');
                    correctDataSecurity = true;
                }

                if ( secHoursPerGuard > @GlobalConstants.MaxSecurityServiceHoursPerGuard) {
                    securityPrice = 0;
                    return;
                }

                if (secHoursPerGuard == 0) {
                    securityPrice = 0;
                    if (securityGuards != 0) {
                        $('#SecServiceHours-error').text('Please e fill the security hours per guard Input');
                        correctDataSecurity = false;
                        securityPrice = 0;
                        return;
                    }

                } else {
                    console.log('anothe here')
                    $('#SecServiceHours-error').text('');
                    if (securityGuards <= 0) {
                        securityPrice = 0
                        $('#SecurityGuards-error').text('Please e fill the security guards Input');
                        correctDataSecurity = false;
                        return;
                    }
                    correctDataSecurity = true
                }

                securityPrice = securityGuards * secHoursPerGuard * securityGuardCostPerHour
                totalPrice = startPrice + tablesAndChairsPrice + securityPrice;
                UpdatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice)
            })
            /////////////////////////////////////////////////////Security Price Calcualtion



            //submit button

            $("#submitForm").submit(function (e) {
                console.log('correctSecData: ' + correctDataSecurity)
                console.log('correctTabData: ' + correctDataTabAndCh)
                if (correctDataSecurity == false || correctDataTabAndCh == false)
                {
                    e.preventDefault();
                }
            })



    });



    function UpdatePriceModelAndPartialView(totalPrice, secuPrice, tabAndChairsPrice) {

        $('#PriceInput').val(totalPrice)
        $('#TablesAndChairsPriceInput').val(tabAndChairsPrice)
        $('#SecurityPriceInput').val(secuPrice)


            $.ajax({
                type: "Post",
                url: "/Events/UpdatePriceView",
                data: {
                    HallPrice : @Model.HallRentalPrice,
                    TotalPrice: totalPrice,
                    SecurityPrice: secuPrice,
                    TablesAndChairsPrice : tabAndChairsPrice

                },
                success: function (data) {
                    partialViewResult(data)
                },
                error: function (error) {
                    alert('failed');
                }
            })

        }


        function partialViewResult(data) {
           // $('#PriceInput').val(data.TotalPrice);
            $("#refTable").html(data);

        }


    </script>
}
