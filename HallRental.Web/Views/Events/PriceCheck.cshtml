@model EventInfoAndPriceCheckViewModel

@{
    ViewData["Title"] = "PriceCheck";
}


<div class="row page-content">
    <div class="col-md-6">
        <div class="w3-card-4 w3-round w3-light-grey input-card-panel">
            <div class="w3-container form-title w3-dark-gray">
                <h2>Price Calculation</h2>
            </div>
            <div class="w3-container panel-form-body">
                <form method="get" asp-action="Summary" id="submitForm">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input asp-for="Date" type="hidden" />
                    <input asp-for="HallId" type="hidden" />
                    <input asp-for="RentTime" type="hidden" />
                    <input asp-for="SecurityGuardCostPerHour" type="hidden" />
                    <input id="HallRentPriceInput" asp-for="HallRentalPrice" type="hidden" />
                    <input id="TablesAndChairsPriceInput" asp-for="TablesAndChairsPrice" type="hidden" />
                    <input id="SecurityPriceInput" asp-for="ParkingLotSecurityPrice" type="hidden" />
                    <input id="PriceInput" asp-for="TotalPrice" type="hidden" />

                    <div class="form-group">
                        <label asp-for="EventStart" class="control-label"></label>
                        <input id="EventStartTime" asp-for="EventStart" class="form-control" />
                        <span id="EventStartTime-error" class="price-check-error"></span>
                        <span asp-validation-for="EventStart" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="EventEnd" class="control-label"></label>
                        <input id="EventEndTime" asp-for="EventEnd" class="form-control" />
                        <span id="EventEndTime-error" class="price-check-error"></span>
                        <span asp-validation-for="EventEnd" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="NumberOfPeople" class="control-label"></label>
                        <input id="NumberOfPeople" asp-for="NumberOfPeople" class="form-control" />
                        <span id="NumberOfPeople-error" class="price-check-error"></span>
                        <span asp-validation-for="NumberOfPeople" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <input id="UseTablesAndChairs-checkbox" class="w3-check" asp-for="UsingTablesAndChairs" />
                        <label>
                            @Html.DisplayNameFor(model => model.UsingTablesAndChairs)
                        </label>
                    </div>
                    <div class="form-group">
                        <input id="ParkingLotSecurity-checkbox" asp-for="ParkingLotSecurityService" class="w3-check" type="checkbox" />
                        <label>
                            @Html.DisplayNameFor(model => model.ParkingLotSecurityService)
                        </label>
                        <div>
                            <span id="ParkLotSecurity-error" class="price-check-error"></span>
                        </div>
                    </div>
                    <div id="SecurityLot-inputs" style="display:none">
                        <div class="form-group">
                            <label class="control-label" asp-for="SecurityStartTime"></label>
                            <input id="ParkLotSecStart" asp-for="SecurityStartTime" class="form-control secLot-input" />
                            <span id="ParkLotSecStart-error" class="price-check-error"></span>
                        </div>

                        <div class="form-group">
                            <label class="control-label" asp-for="SecurityEndTime"></label>
                            <input id="ParkLotSecEnd" asp-for="SecurityEndTime" class="form-control secLot-input" />
                            <span id="ParkLotSecEnd-error" class="price-check-error"></span>
                        </div>
                    </div>
                    <input id="parkingLotSecurityHours" asp-for="ParkingLotSecurityHours" type="hidden" />
                    <div class="form-group">
                        <input type="submit" value="Continue" class="w3-button w3-dark-grey w3-round" />
                        @if (!User.Identity.IsAuthenticated)
                        {
                            <span class="input-redirect">
                                By pressing the button Continue you will be redirected to login in your account
                            </span>
                        }
                    </div>
                </form>
            </div>
        </div>
    </div>


    <div class="col-md-6 event-side-info">
        <p>Hall: <b>@Model.HallName</b></p>
        <p>Date: <b>@Model.Date.ToShortDateString()</b></p>
        <p>Rent Time: <b>@Model.RentTimeDisplay</b></p>
        <div id="refTable" class="price-side-info">
            @Html.Partial("_PartialPrice", Model.EventPriceModel)
        </div>
    </div>
</div>


@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>

            let tablesAndChairsPrice;
            let securityPrice;

            let startPrice;

            let totalPrice;
            let chairCostPerPerson;
            let hallCapacity;

            let securityGuardCostPerHour;

            let correctDataTabAndCh;
            let correctDataSecurity;
            let correctDataEventTime;

            //Models
            let rentStartDateTimeModel;
            let rentEndDateTimeModel;

        $(() => {
            console.log('ready')

             tablesAndChairsPrice = 0;
             securityPrice = 0;

             startPrice = @Model.HallRentalPrice;

             totalPrice = @Model.TotalPrice;
             chairCostPerPerson = @Model.ChairTableCostPerPerson;
             hallCapacity = @Model.HallCapacity;

             securityGuardCostPerHour = @Model.SecurityGuardCostPerHour;

             correctDataTabAndCh = true;
             correctDataSecurity = true;
             correctDataEventTime = true;


            //Models
             rentStartDateTimeModel = '@(Model.EventStart)';
             rentEndDateTimeModel = '@(Model.EventEnd)';

            //Tables and chairs checkbox
            if ($('#ParkingLotSecurity-checkbox').prop('checked')) {
                calculateParkingLotSecurityPrice();
            }

            //Parking Lot Security checkbox
            if ($('#ParkingLotSecurity-checkbox').prop('checked')) {
                calculateTablesAndChairsPrice();
            }


        });



            //Event Start-End Time

            $('#EventStartTime').change(() => {

                correctDataEventTime = checkIfEventDataIsCorrect();
                console.log('EventStartTime '  + correctDataEventTime)
            })


            $('#EventEndTime').change(() => {

                correctDataEventTime = checkIfEventDataIsCorrect();
                console.log('EventEndTime ' + correctDataEventTime)

            });



            function checkIfEventDataIsCorrect() {

                //Input Event Start
                let inputEventStartTimeVal = $('#EventStartTime').val();
                let inputEventStartTime = new Date(inputEventStartTimeVal)
                console.log('inputStartTime - ' + inputEventStartTime)


                //Input Event End
                let inputEventEndTimeVal = $("#EventEndTime").val();
                let inputEventEndTime = new Date(inputEventEndTimeVal)
                console.log('inputEventEndTime - ' + inputEventEndTime)


                //Rent Start Time
                let rentStartDateTime = new Date(rentStartDateTimeModel);
                console.log('rentStartDateTime - ' + rentStartDateTime)


                //Rent End Time
                let rentEndDateTime = new Date(rentEndDateTimeModel);
                console.log('rentEndDateTime - ' + rentEndDateTime)


                console.log('---------------------------')

                if (isValidDate(inputEventStartTime) == false) {
                    $('#EventStartTime-error').text('Invalid Date');
                    return false;
                }

                if (isValidDate(inputEventEndTime) == false) {
                    $('#EventEndTime-error').text('Invalid Date');
                    return false;
                }

                if (inputEventEndTime < rentStartDateTime) {
                    $('#EventEndTime-error').text('Event End Time cannot be before Rent Start Time');
                    return false;
                } else {
                    $('#EventEndTime-error').text('');
                }

                if (inputEventEndTime > rentEndDateTime) {
                    $('#EventEndTime-error').text('Event End Time cannot be after Rent End Time');
                    return false;
                } else {
                    $('#EventEndTime-error').text('');
                }

                if (inputEventStartTime < rentStartDateTime) {
                    $('#EventStartTime-error').text('Event Start Time cannot be before Rent Start Time');
                    return false;
                } else {
                    $('#EventStartTime-error').text('');
                }
                if (inputEventStartTime > rentEndDateTime) {
                    $('#EventStartTime-error').text('Event Start Time cannot be after Rent End Time');
                    return false;
                } else {
                    $('#EventStartTime-error').text('');
                }

                if (inputEventStartTime.setHours(0, 0, 0, 0) != rentStartDateTime.setHours(0, 0, 0, 0)) {
                    $('#EventStartTime-error').text('Event Date cannot be different from Rent Date');
                    return false;
                } else {
                    $('#EventStartTime-error').text('');
                }

                return true;
            }



            //Table and Chairs Price Calcualtion
            $('#UseTablesAndChairs-checkbox').change(() => {
                calculateTablesAndChairsPrice();
            })

            function calculateTablesAndChairsPrice(){
                let numberOfPeople = $('#NumberOfPeople').val()

                if (numberOfPeople > hallCapacity) {
                    $('#NumberOfPeople-error').text(`The Hall capacity is ${hallCapacity} people`)
                    correctDataTabAndCh = false;
                    return;
                } else {
                    $('#NumberOfPeople-error').text("")
                    correctDataTabAndCh = true;
                }

                if ($('#UseTablesAndChairs-checkbox').prop('checked')) {

                    if (numberOfPeople < 1) {
                        $('#NumberOfPeople-error').text("Please e mark the number of people")
                    }
                    console.log('checkbox  - checked ')
                    tablesAndChairsPrice = numberOfPeople * chairCostPerPerson;

                    totalPrice = startPrice + tablesAndChairsPrice + securityPrice;
                }
                else {
                    console.log('UseTablesAndChairs checkbox  - not checked')
                    tablesAndChairsPrice = 0;

                    totalPrice = startPrice + tablesAndChairsPrice + securityPrice;
                }

                let parkLotSecHours = checkDifference();
                updatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice, parkLotSecHours)
            }


            $('#NumberOfPeople').change(function () {
                let numberOfPeople = $('#NumberOfPeople').val()

                if (numberOfPeople > hallCapacity) {
                    $('#NumberOfPeople-error').text(`The Hall capacity is ${hallCapacity} people`)
                    tablesAndChairsPrice = 0;
                    correctDataTabAndCh = false;
                    return;
                } else {
                    $('#NumberOfPeople-error').text("")
                    correctDataTabAndCh = true;
                }

                if ($('#UseTablesAndChairs-checkbox').prop('checked')) {

                    if (numberOfPeople < 1) {
                        $('#NumberOfPeople-error').text("Please e mark the number of people")
                        return;
                    } else {
                        $('#NumberOfPeople-error').text("")
                    }

                    tablesAndChairsPrice = numberOfPeople * chairCostPerPerson;

                    totalPrice = startPrice + tablesAndChairsPrice + securityPrice;
                    let parkLotSecHours = checkDifference();
                    updatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice, parkLotSecHours)
                }
            })




            //ParkingLotSecurity

            $('#ParkingLotSecurity-checkbox').change(() => {

                calculateParkingLotSecurityPrice();
            })

            function calculateParkingLotSecurityPrice() {

                if ($('#ParkingLotSecurity-checkbox').prop('checked')) {

                    $('#SecurityLot-inputs').show();
                    console.log('ParkingLotSecurity - checked')

                } else {
                    console.log('ParkingLotSecurity - NOT checked')
                    $('#SecurityLot-inputs').hide();
                    correctDataSecurity = true;
                    updateSecurityPrice(0)
                    return;
                }

                let isDateCorrect = checkIfSecurityDataIsCorrect();

                console.log(isDateCorrect);

                if (isDateCorrect == false) {
                    correctDataSecurity = false;
                    return;
                }

                correctDataSecurity = true;
                let hoursDiff = checkDifference();

                updateSecurityPrice(hoursDiff);
            }


            $("#ParkLotSecStart").change(() => {

                let isDateCorrect = checkIfSecurityDataIsCorrect();
                console.log(isDateCorrect);

                if (isDateCorrect == false) {
                    correctDataSecurity = false;
                    return;
                }

                correctDataSecurity = true;

                let hoursDiff = checkDifference();

                updateSecurityPrice(hoursDiff);
            });

            $("#ParkLotSecEnd").change(() => {

                let isDateCorrect = checkIfSecurityDataIsCorrect();

                console.log(isDateCorrect);
                if (isDateCorrect == false) {
                    correctDataSecurity = false;
                    return;
                }

                correctDataSecurity = true;
                let hoursDiff = checkDifference();

                updateSecurityPrice(hoursDiff);
            });


            function checkIfSecurityDataIsCorrect() {
                let parkLotSecStartTimeValue = $("#ParkLotSecStart").val();
                let parkLotSecEndTimeValue = $("#ParkLotSecEnd").val();

                let parkLotSecStartTime = new Date(parkLotSecStartTimeValue)
                let parkLotSecEndTime = new Date(parkLotSecEndTimeValue)

                //Models Date
                let eventStartDate = new Date(rentStartDateTimeModel);
                let eventEndDate = new Date(rentEndDateTimeModel)

                let eventEnd2hoursAfterRentEndTime = new Date(rentEndDateTimeModel)
                eventEnd2hoursAfterRentEndTime.setHours(eventEnd2hoursAfterRentEndTime.getHours() + 2);
                console.log('eventEnd2hoursAfterRentEndTime' + eventEnd2hoursAfterRentEndTime);


                if (isValidDate(parkLotSecStartTime) == false) {
                    $('#ParkLotSecStart-error').text('Invalid Date');
                    return false;
                }

                if (isValidDate(parkLotSecEndTime) == false) {
                    $('#ParkLotSecEnd-error').text('Invalid Date');
                    return false;
                }


                if (parkLotSecEndTime <= eventStartDate) {
                    $('#ParkLotSecEnd-error').text('Security End DateTime cannot be before Rent Start DateTime');
                    return false;
                } else {
                    $('#ParkLotSecEnd-error').text('');
                }

                if (parkLotSecEndTime <= parkLotSecStartTime) {
                    if (parkLotSecStartTime > eventStartDate) {
                        $('#ParkLotSecStart-error').text('Security Start DateTime cannot be after Rent Start DateTime');
                    } else {
                        $('#ParkLotSecStart-error').text('');
                    }

                    $('#ParkLotSecEnd-error').text('Security End Time cannot be before Security Start Time');
                    return false;
                } else {
                    $('#ParkLotSecEnd-error').text('');
                }

                if (parkLotSecEndTime > eventEnd2hoursAfterRentEndTime) {
                    $('#ParkLotSecEnd-error').text('Security End Time cannot be more than 2 hours after Rent End Time');
                    return false;
                } else {
                    $('#ParkLotSecEnd-error').text('');
                }

                if (parkLotSecStartTime < eventStartDate) {
                    $('#ParkLotSecStart-error').text('Security Start DateTime cannot be before Rent Start DateTime');
                    return false;
                } else {
                    $('#ParkLotSecStart-error').text('');
                }

                if (parkLotSecStartTime.setHours(0, 0, 0, 0) != eventStartDate.setHours(0, 0, 0, 0)) {
                    $('#ParkLotSecStart-error').text('Parking Lot Security Date cannot be different from Event Date');
                    return false;
                } else {
                    $('#ParkLotSecStart-error').text('');
                }

                return true;
            }


            function checkDifference() {
                let parkLotSecStartTimeValue = $("#ParkLotSecStart").val();
                let parkLotSecEndTimeValue = $("#ParkLotSecEnd").val();

                let parkLotSecStartTime = new Date(parkLotSecStartTimeValue)
                let parkLotSecEndTime = new Date(parkLotSecEndTimeValue)

                let hoursDiff = Math.abs(parkLotSecEndTime - parkLotSecStartTime) / 36e5;

                hoursDiff = Math.ceil(hoursDiff);

                console.log(`Sec start - ${parkLotSecStartTime}`);
                console.log(`Sec end - ${parkLotSecEndTime}`);
                console.log(`Parking Lot Security hours - ${hoursDiff}`);

                return hoursDiff;
            }

            function updateSecurityPrice(hoursDiff) {
                if (isNaN(hoursDiff)) {
                    hoursDiff = 0;
                }


                if ($('#ParkingLotSecurity-checkbox').prop('checked')) {

                    //Check if hours are less than 4
                    if (hoursDiff < 4) {
                        $('#ParkLotSecurity-error').text('Parking Lot Security hours cannot be less than 4')
                        console.log('Parking Lot Security hours cannot be less than 4')
                        correctDataSecurity = false;
                        return;
                    }

                    securityPrice = hoursDiff * securityGuardCostPerHour;

                }else {
                    securityPrice = 0;
                    correctDataSecurity = true;
                }

                $('#parkingLotSecurityHours').val(hoursDiff);

                totalPrice = startPrice + tablesAndChairsPrice + securityPrice;

                updatePriceModelAndPartialView(totalPrice, securityPrice, tablesAndChairsPrice, hoursDiff)
            }


            function isValidDate(date) {
                return date && Object.prototype.toString.call(date) === "[object Date]" && !isNaN(date);
            }


            //submit button

            $("#submitForm").submit(function (e) {
                console.log('correctSecData: ' + correctDataSecurity)
                console.log('correctTabData: ' + correctDataTabAndCh)
                console.log('correctEventTimeData: ' + correctDataEventTime)
                if (correctDataSecurity == false
                    || correctDataTabAndCh == false
                    || correctDataEventTime ==false)
                {
                    e.preventDefault();
                }
            })


    function updatePriceModelAndPartialView(totalPrice, securityPrice, tabAndChairsPrice, parkLotSecHours) {

        $('#PriceInput').val(totalPrice)
        $('#TablesAndChairsPriceInput').val(tabAndChairsPrice)
        $('#SecurityPriceInput').val(securityPrice)

            $.ajax({
                type: "Post",
                url: "/Events/UpdatePriceView",
                data: {
                    HallPrice : @Model.HallRentalPrice,
                    TotalPrice: totalPrice,
                    SecurityPrice: securityPrice,
                    TablesAndChairsPrice: tabAndChairsPrice,
                    ParkingLotSecurityHours: parkLotSecHours,
                },
                success: function (data) {
                    partialViewResult(data)
                },
                error: function (error) {
                    alert('failed');
                    console.log(error)
                }
            })
        }


        function partialViewResult(data) {
            $("#refTable").html(data);

        }

    </script>
}
